on:
  pull_request:
    paths:
      - terraform/**
      - app/**
  push:
    paths:
      - terraform/**
      - app/**
    branches:
      - main
  # Platform infra should be versioned, so we can run terraform on every new release
  # considering release are using tags, with the example format v0.1.0
  create:
    tags:
      - v*

name: üèóÔ∏è Platform provisioning

defaults:
  run:
    shell: bash
    working-directory: terraform

jobs:
  platform-provisioning:
    name: Creating ${{ matrix.context }}
    runs-on: ubuntu-latest
    strategy:
      # This is the equivalent of a for loop, and we'll be using it to terraform our platform
      # in a reusable way, with fewer lines of code
      matrix:
        context: [tf-state-files, core-networking, eks-cluster, ecr-repos, argocd]
      # We'd like to avoid parallel run for terraform, order matters
      max-parallel: 1

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: SCM Checkout
        uses: actions/checkout@v2

      - name: Terraform security gate
        # tfsec uses static analysis of terraform templates to spot potential security issues.
        # On each pull request and subsequent commit, tfsec will run and add comments to the PR where tfsec has failed.
        uses: aquasecurity/tfsec-pr-commenter-action@v1.0.2
        with:
          github_token: ${{ github.token }}
          working_directory: terraform/${{ matrix.context }}

      # Install Dependencies
      - name: Install aws-iam-authenticator
        run: |
          echo Installing aws-iam-authenticator...
          mkdir ~/aws
          curl -Lo ~/aws/aws-iam-authenticator \
          "https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.5/aws-iam-authenticator_0.5.5_linux_amd64"
          chmod +x ~/aws/aws-iam-authenticator
          sudo cp ~/aws/aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4

      - name: üèóÔ∏è Terraforming ${{ matrix.context }}
        run: |
          pushd ${{ matrix.context }} && terraform init && terraform apply -no-color -auto-approve && popd

  app-image-creation:
    needs: platform-provisioning
    runs-on: ubuntu-latest

    steps:
      # We'll use the short version of current commit's hash for tagging the image
      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Check outputs
        run: echo ${{ steps.vars.outputs.sha_short }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push app image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cloudcat/app
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#   TODO: Post the output of the platform provisioning on PR as a comment
#         Consider using atlantis when the team expands https://www.runatlantis.io/

#  - uses: actions/github-script@v6
#    if: github.event_name == 'pull_request'
#    env:
#      PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#    with:
#      github-token: ${{ secrets.GITHUB_TOKEN }}
#      script: |
#        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#        <details><summary>Validation Output</summary>
#
#        \`\`\`\n
#        ${{ steps.validate.outputs.stdout }}
#        \`\`\`
#
#        </details>
#
#        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#
#        <details><summary>Show Plan</summary>
#
#        \`\`\`\n
#        ${process.env.PLAN}
#        \`\`\`
#
#        </details>
#
#        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
#
#        github.rest.issues.createComment({
#          issue_number: context.issue.number,
#          owner: context.repo.owner,
#          repo: context.repo.repo,
#          body: output
#        })